name: Build and test

on: [push, pull_request]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  adapter-build-hw:
    name: Build - Adapters on HW
    if: github.repository == 'oneapi-src/unified-runtime'  # run only on upstream; forks won't have the HW
    strategy:
      matrix:
        adapter: [
     #     {name: CUDA, platform: ""},
          {name: HIP, platform: ""},
      #    {name: L0, platform: ""},
     #     {name: OPENCL, platform: "Intel(R) OpenCL"}
        ]
        build_type: [Debug, Release]
        compiler: [{c: gcc, cxx: g++}, {c: clang, cxx: clang++}]

    runs-on: ${{matrix.adapter.name}}

    steps:
    - uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0

    - name: Install pip packages
      run: pip install -r third_party/requirements.txt

    - name: Download DPC++
      run: |
        wget -O ${{github.workspace}}/dpcpp_compiler.tar.gz https://github.com/intel/llvm/releases/download/nightly-2023-09-21/sycl_linux.tar.gz
        mkdir dpcpp_compiler
        tar -xvf ${{github.workspace}}/dpcpp_compiler.tar.gz -C dpcpp_compiler

    - name: Configure CMake
      run: >
        cmake
        -B${{github.workspace}}/build
        -DCMAKE_C_COMPILER=${{matrix.compiler.c}}
        -DCMAKE_CXX_COMPILER=${{matrix.compiler.cxx}}
        -DCMAKE_BUILD_TYPE=${{matrix.build_type}}
        -DUR_ENABLE_TRACING=ON
        -DUR_DEVELOPER_MODE=ON
        -DUR_BUILD_TESTS=ON
        -DUR_BUILD_ADAPTER_${{matrix.adapter.name}}=ON
        -DUR_DPCXX=${{github.workspace}}/dpcpp_compiler/bin/clang++
        -DUR_SYCL_LIBRARY_DIR=${{github.workspace}}/dpcpp_compiler/lib
        ${{ matrix.adapter.name == 'HIP' && '-DUR_CONFORMANCE_AMD_ARCH=gfx1030' || '' }} 
        ${{ matrix.adapter.name == 'HIP' && '-DUR_HIP_PLATFORM=AMD' || '' }}

    - name: Build
      # This is so that device binaries can find the sycl runtime library
      run: cmake --build ${{github.workspace}}/build -j $(nproc)

    - name: Test adapter specific
      working-directory: ${{github.workspace}}/build
      run: ctest -C ${{matrix.build_type}} --output-on-failure -L "adapter-specific" --timeout 180

    # Temporarily disabling platform test for L0, because of hang
    # See issue: #824
    - name: Test L0 adapter
      if: matrix.adapter.name == 'L0'
      working-directory: ${{github.workspace}}/build
      run: ctest -C ${{matrix.build_type}} --output-on-failure -L "conformance" -E "platform-adapter_level_zero" --timeout 180

    - name: Test adapters
      if: matrix.adapter.name != 'L0'
      working-directory: ${{github.workspace}}/build
      run: env UR_CTS_ADAPTER_PLATFORM="${{matrix.adapter.platform}}" ctest  -VV -C ${{matrix.build_type}} --output-on-failure -L "conformance" --timeout 180

    - name: Get information about platform
      if: ${{ always() }}
      run: .github/scripts/get_system_info.sh
